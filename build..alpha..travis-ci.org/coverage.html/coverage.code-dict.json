{"/home/travis/build/npmtest/node-npmtest-statsd-client/test.js":"/* istanbul instrument in package npmtest_statsd_client */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-statsd-client/lib.npmtest_statsd_client.js":"/* istanbul instrument in package npmtest_statsd_client */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_statsd_client = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_statsd_client = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-statsd-client/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-statsd-client && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_statsd_client */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_statsd_client\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_statsd_client.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_statsd_client.rollup.js'] =\n            local.assetsDict['/assets.npmtest_statsd_client.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_statsd_client.__dirname + '/lib.npmtest_statsd_client.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-statsd-client/node_modules/statsd-client/lib/statsd-client.js":"/*\n * Set up the statsd-client.\n *\n * Requires the `hostname`. Options currently allows for `port` and `debug` to\n * be set.\n */\nfunction StatsDClient(options) {\n    this.options = options || {};\n    this._helpers = undefined;\n\n    // Set defaults\n    this.options.prefix = this.options.prefix || \"\";\n\n    // Prefix?\n    if (this.options.prefix && this.options.prefix !== \"\") {\n        // Add trailing dot if it's missing\n        var p = this.options.prefix;\n        this.options.prefix = p[p.length - 1] === '.' ? p : p + \".\";\n    }\n\n    // Figure out which socket to use\n    if (this.options._socket) {\n        // Re-use given socket\n        this._socket = this.options._socket;\n    } else if(this.options.tcp) {\n        //User specifically wants a tcp socket\n        this._socket = new (require('./TCPSocket'))(this.options);\n    } else if (this.options.host && this.options.host.match(/^http(s?):\\/\\//i)) {\n        // Starts with 'http://', then create a HTTP socket\n        this._socket = new (require('./HttpSocket'))(this.options);\n    } else {\n        // Fall back to a UDP ephemeral socket\n        this._socket = new (require('./EphemeralSocket'))(this.options);\n    }\n}\n\n/*\n * Get a \"child\" client with a sub-prefix.\n */\nStatsDClient.prototype.getChildClient = function getChildClient(extraPrefix) {\n    return new StatsDClient({\n        prefix: this.options.prefix + extraPrefix,\n        _socket: this._socket\n    });\n};\n\n/*\n * gauge(name, value)\n */\nStatsDClient.prototype.gauge = function gauge(name, value) {\n    this._socket.send(this.options.prefix + name + \":\" + value + \"|g\");\n\n    return this;\n};\n\nStatsDClient.prototype.gaugeDelta = function gaugeDelta(name, delta) {\n    var sign = delta >= 0 ? \"+\" : \"-\";\n    this._socket.send(this.options.prefix + name + \":\" + sign + Math.abs(delta) + \"|g\");\n\n    return this;\n};\n\n/*\n * set(name, value)\n */\nStatsDClient.prototype.set = function set(name, value) {\n    this._socket.send(this.options.prefix + name + \":\" + value + \"|s\");\n\n    return this;\n};\n\n/*\n * counter(name, delta)\n */\nStatsDClient.prototype.counter = function counter(name, delta) {\n    this._socket.send(this.options.prefix + name + \":\" + delta + \"|c\");\n\n    return this;\n};\n\n/*\n * increment(name, [delta=1])\n */\nStatsDClient.prototype.increment = function increment(name, delta) {\n    this.counter(name, Math.abs(delta === undefined ? 1 : delta));\n\n    return this;\n};\n\n/*\n * decrement(name, [delta=-1])\n */\nStatsDClient.prototype.decrement = function decrement(name, delta) {\n    this.counter(name, -1 * Math.abs(delta === undefined ? 1 : delta));\n\n    return this;\n};\n\n/*\n * timing(name, date-object | ms)\n */\nStatsDClient.prototype.timing = function timing(name, time) {\n    // Date-object or integer?\n    var t = time instanceof Date ? new Date() - time : time;\n\n    this._socket.send(this.options.prefix + name + \":\" + t + \"|ms\");\n\n    return this;\n};\n\n/*\n * histogram(name, value)\n */\nStatsDClient.prototype.histogram = function histogram(name, value) {\n    this._socket.send(this.options.prefix + name + \":\" + value + \"|h\");\n\n    return this;\n};\n\n/*\n * Send raw data to the underlying socket. Useful for dealing with custom\n * statsd-extensions in a pinch.\n */\nStatsDClient.prototype.raw = function raw(rawData) {\n    this._socket.send(rawData);\n\n    return this;\n};\n\n/*\n * Close the socket, if in use and cancel the interval-check, if running.\n */\nStatsDClient.prototype.close = function close() {\n    this._socket.close();\n\n    return this;\n};\n\n/*\n * Return an object with available helpers.\n */\nStatsDClient.prototype.__defineGetter__('helpers', function () {\n    if (!(this._helpers)) {\n        var helpers = {},\n            that = this,\n            files = require('fs').readdirSync(__dirname + '/helpers');\n\n        files.forEach(function (filename) {\n            if (/\\.js$/.test(filename) && filename !== 'index.js') {\n                var name = filename.replace(/\\.js$/, '');\n                helpers[name] = require('./helpers/' + filename)(that);\n            }\n        });\n        this._helpers = helpers;\n    }\n\n    return this._helpers;\n});\n\nmodule.exports = StatsDClient;\n","/home/travis/build/npmtest/node-npmtest-statsd-client/node_modules/statsd-client/lib/datadog-client.js":"/*\n * Set up the statsd-client.\n *\n * Requires the `hostname`. Options currently allows for `port` and `debug` to\n * be set.\n */\n\nvar util = require('util');\n\nvar StatsDClient = require('./statsd-client');\n\n\nfunction DatadogClient(options) {\n    StatsDClient.call(this);\n}\n\nutil.inherits(DatadogClient, StatsDClient);\n\n/* Generic send-things-to-datadog\n */\nDatadogClient._sendMetric = function (name, value, typeChar, sampleRate, tags) {\n    var text = this.options.prefix + name + ':' + value + '|' + typeChar;\n\n    var _sampleRate = sampleRate;\n    var _tags = tags;\n    if (arguments.length === 3) {\n        _tags = sampleRate;\n        _sampleRate = undefined;\n    }\n\n    if (_sampleRate) { text += '|@' + _sampleRate; }\n\n    if (_tags) {\n        text += '|#' + Object.keys(_tags).map(function (tag) {\n            return tag + ':' + _tags[tag];\n        }).join(',');\n    }\n\n    this._socket.send(text);\n}\n\n/*\n * Get a \"child\" client with a sub-prefix.\n */\nStatsDClient.prototype.getChildClient = function (extraPrefix) {\n    return new DatadogClient({\n        prefix: this.options.prefix + extraPrefix,\n        _socket: this._socket\n    });\n};\n\n\n\nmodule.exports = DatadogClient;\n","/home/travis/build/npmtest/node-npmtest-statsd-client/node_modules/statsd-client/lib/EphemeralSocket.js":"var dgram = require('dgram');\n\n/*global console*/\n\nfunction EphemeralSocket(options) {\n    options = options || {};\n\n    this._hostname = options.host || 'localhost';\n    this._port = parseInt(options.port, 10) || 8125;\n    this._debug = options.debug || false;\n    this._socketTimeoutMsec = 'socketTimeout' in options ? options.socketTimeout : 1000;\n\n    // Check https://github.com/etsy/statsd/blob/master/docs/metric_types.md#multi-metric-packets for advisable sizes.\n    this._maxBufferSize = 'maxBufferSize' in options ? options.maxBufferSize : 1200;\n\n    // Set up re-usable socket\n    this._socket = undefined; // Store the socket here\n    this._socketUsed = false; // Flag if it has been used\n    this._socketTimer = undefined; // Reference to check-timer\n    this._buffer = \"\";\n}\n\nEphemeralSocket.prototype.log = function log(messages) {\n    //console.log.apply(null, arguments);\n};\n\n/* Dual-use timer.\n *\n * First checks if there is anything in it's buffer that need to be sent. If it\n * is non-empty, it will be flushed. (And thusly, the socket is in use and we\n * stop checking further right away).\n *\n * If there is nothing in the buffer and the socket hasn't been used in the\n * previous interval, close it.\n */\nEphemeralSocket.prototype._socketTimeout = function _socketTimeout() {\n    this.log(\"close()\");\n    // Flush the buffer, if it contain anything.\n    if (this._buffer.length > 0) {\n        this._flushBuffer();\n        return;\n    }\n\n    // Is it already closed? -- then stop here\n    if (!this._socket) {\n        return;\n    }\n\n    // Has been used? -- reset use-flag and wait some more\n    if (this._socketUsed) {\n        this._socketUsed = false;\n        return;\n    }\n\n    // Not used? -- close the socket\n    this.close();\n};\n\n\n/*\n * Close the socket, if in use and cancel the interval-check, if running.\n */\nEphemeralSocket.prototype.close = function close() {\n    this.log(\"close()\");\n    if (!this._socket) {\n        return;\n    }\n\n    if (this._buffer.length > 0) {\n        this._flushBuffer();\n    }\n\n    // Cancel the running timer\n    if (this._socketTimer) {\n        clearInterval(this._socketTimer);\n        this._socketTimer = undefined;\n    }\n\n    // Wait a tick or two, so any remaining stats can be sent.\n    setTimeout(this.kill.bind(this), 10);\n};\n\n/* Kill the socket RIGHT NOW.\n */\nEphemeralSocket.prototype.kill = function kill() {\n    this.log(\"kill()\");\n    if (!this._socket) {\n        return;\n    }\n\n    // Clear the timer and catch any further errors silently\n    if (this._socketTimer) {\n        clearInterval(this._socketTimer);\n        this._socketTimer = undefined;\n    }\n    this._socket.on('error', function () {});\n\n    this._socket.close();\n    this._socket = undefined;\n};\n\nEphemeralSocket.prototype._createSocket = function _createSocket(callback) {\n    this.log(\"_createSocket()\");\n    var that = this;\n    if (this._socket) {\n        return callback();\n    }\n\n    this._socket = dgram.createSocket('udp4');\n\n    // Listen on 'error'-events, so they don't bubble up to the main\n    // application. Try closing the socket for now, forcing it to be re-created\n    // later.\n    this._socket.once('error', this.kill.bind(this));\n\n    // Call on when the socket is ready.\n    this._socket.once('listening', function () {\n        return callback();\n    });\n    this._socket.bind({ port: 0, exclusive: true }, null);\n\n    // Start timer, if we have a positive timeout\n    if (this._socketTimeoutMsec > 0 && !this._socketTimer) {\n        this._socketTimer = setInterval(this._socketTimeout.bind(this), this._socketTimeoutMsec);\n    }\n};\n\n/* Buffer management\n */\nEphemeralSocket.prototype._enqueue = function _enqueue(data) {\n    this.log(\"_enqueue(\", data, \")\");\n\n    if (!this._socketTimer) {\n        this._socketTimer = setInterval(this._socketTimeout.bind(this), this._socketTimeoutMsec);\n    }\n    // Empty buffer if it's too full\n    if (this._buffer.length + data.length > this._maxBufferSize) {\n        this._flushBuffer();\n    }\n\n    if (this._buffer.length === 0) {\n        this._buffer = data;\n    } else {\n        this._buffer += \"\\n\" + data;\n    }\n};\n\nEphemeralSocket.prototype._flushBuffer = function _flushBuffer() {\n    this.log(\"_flushBuffer() →\", this._buffer);\n    this._send(this._buffer);\n    this._buffer = \"\";\n};\n\n/* Send data - public interface.\n */\nEphemeralSocket.prototype.send = function send(data) {\n    this.log(\"send(\", data, \")\");\n    if (this._maxBufferSize === 0) {\n        return this._send(data);\n    } else {\n        this._enqueue(data);\n    }\n};\n\n/*\n * Send data.\n */\nEphemeralSocket.prototype._send = function _send(data) {\n    this.log(\"_send(\", data, \")\");\n    // If we don't have a socket, or we have created one but it isn't\n    // ready yet, we need to enqueue data to send once the socket is ready.\n    var that = this;\n\n    this._createSocket(function () {\n        that._socketUsed = true;\n\n        // Create message\n        var message = new Buffer(data);\n\n        if (that._debug) {\n            console.warn(message.toString());\n        }\n\n        that._socket.send(message, 0, message.length, that._port, that._hostname);\n    });\n};\n\nmodule.exports = EphemeralSocket;\n","/home/travis/build/npmtest/node-npmtest-statsd-client/node_modules/statsd-client/lib/HttpSocket.js":"var http = require('http');\nvar urlParse = require('url').parse;\n\n/*global console*/\n\nfunction HttpSocket(options) {\n    options = options || {};\n\n    this._requestOptions = urlParse(options.host || 'http://localhost/');\n    this._requestOptions.method = 'PUT';\n    this._requestOptions.headers = options.headers || {};\n    this._debug = options.debug || false;\n    this._socketTimeoutMsec = 'socketTimeout' in options ? options.socketTimeout : 1000;\n\n    // Require the correct HTTP library\n    if (this._requestOptions.protocol === 'https:') {\n        http = require('https');\n    }\n\n    this._maxBufferSize = 'maxBufferSize' in options ? options.maxBufferSize : 10000;\n\n    // Set up re-usable socket\n    this._socketTimer = undefined; // Reference to check-timer\n    this._buffer = \"\";\n}\n\nHttpSocket.prototype.log = function log(messages) {\n    //console.log.apply(null, arguments);\n};\n\n/* Checks if there is anything in it's buffer that need to be sent. If it is\n * non-empty, it will be flushed.\n */\nHttpSocket.prototype._socketTimeout = function _socketTimeout() {\n    this.log(\"_socketTimeout()\");\n    // Flush the buffer, if it contain anything.\n    if (this._buffer.length > 0) {\n        this._flushBuffer();\n        return;\n    }\n};\n\n\n/*\n * Flush all current data and stop any timers running.\n */\nHttpSocket.prototype.close = function close() {\n    this.log(\"close()\");\n    if (this._buffer.length > 0) {\n        this._flushBuffer();\n    }\n\n    // Cancel the running timer\n    if (this._socketTimer) {\n        clearInterval(this._socketTimer);\n        this._socketTimer = undefined;\n    }\n\n    // Wait a tick or two, so any remaining stats can be sent.\n    setTimeout(this.kill.bind(this), 10);\n};\n\n/* Kill the socket RIGHT NOW.\n */\nHttpSocket.prototype.kill = function kill() {\n    this.log(\"kill()\");\n\n    // Clear the timer and catch any further errors silently\n    if (this._socketTimer) {\n        clearInterval(this._socketTimer);\n        this._socketTimer = undefined;\n    }\n};\n\n/* Buffer management\n */\nHttpSocket.prototype._enqueue = function _enqueue(data) {\n    this.log(\"_enqueue(\", data, \")\");\n\n    if (!this._socketTimer) {\n        this._socketTimer = setInterval(this._socketTimeout.bind(this), this._socketTimeoutMsec);\n    }\n\n    // Empty buffer if it's too full\n    if (this._buffer.length + data.length > this._maxBufferSize) {\n        this._flushBuffer();\n    }\n\n    if (this._buffer.length === 0) {\n        this._buffer = data;\n    } else {\n        this._buffer += \"\\n\" + data;\n    }\n};\n\nHttpSocket.prototype._flushBuffer = function _flushBuffer() {\n    this.log(\"_flushBuffer() →\", this._buffer);\n    this._send(this._buffer);\n    this._buffer = \"\";\n};\n\n/* Send data - public interface.\n */\nHttpSocket.prototype.send = function send(data) {\n    this.log(\"send(\", data, \")\");\n    if (this._maxBufferSize === 0) {\n        return this._send(data);\n    } else {\n        this._enqueue(data);\n    }\n};\n\n/*\n * Send data.\n */\nHttpSocket.prototype._send = function _send(data) {\n    this.log(\"_send(\", data, \")\");\n    var that = this;\n\n    var req = http.request(this._requestOptions);\n\n    // Catch but ignore errors\n    req.once('error', function () {});\n\n    // Send data\n    req.end(data);\n\n    if (that._debug) { console.warn(data); }\n};\n\nmodule.exports = HttpSocket;\n","/home/travis/build/npmtest/node-npmtest-statsd-client/node_modules/statsd-client/lib/TCPSocket.js":"var net = require('net');\n\n/*global console*/\n\nfunction TCPSocket(options) {\n    options = options || {};\n\n    this._hostname = options.host || 'localhost';\n    this._port = options.port || 8125;\n    this._debug = options.debug || false;\n    this._flushBufferTimeout = 'socketTimeout' in options ? options.socketTimeout : 1000;\n    this._timeoutsToClose = 'socketTimeoutsToClose' in options ? options.socketTimeoutsToClose : 10; // close socket if not used in 10 flush intervals\n\n    // Check https://github.com/etsy/statsd/#multi-metric-packets for advisable sizes.\n    this._maxBufferSize = 'maxBufferSize' in options ? options.maxBufferSize : 1200;\n\n    // Set up re-usable socket\n    this._socket = undefined; // Store the socket here\n    this._socketUsed = false; // Flag if it has been used\n    this._socketLastUsed = 0; // How many intervals of timeout since socket has been used\n    this._socketTimer = undefined; // Reference to check-timer\n    this._buffer = [];\n}\n\nTCPSocket.prototype.log = function log(messages) {\n    //console.log.apply(null, arguments);\n};\n\n/* Dual-use timer.\n *\n * First checks if there is anything in it's buffer that need to be sent. If it\n * is non-empty, it will be flushed. (And thusly, the socket is in use and we\n * stop checking further right away).\n *\n * If there is nothing in the buffer and the socket hasn't been used in the\n * previous interval, close it.\n */\nTCPSocket.prototype._socketTimeout = function _socketTimeout() {\n    this.log(\"close()\");\n    // Flush the buffer, if it contain anything.\n    if (this._buffer.length > 0) {\n        this._flushBuffer();\n        return;\n    }\n\n    // Is it already closed? -- then stop here\n    if (!this._socket) {\n        return;\n    }\n\n    // Not used?\n    if (this._socketUsed === false) {\n        this._socketLastUsed++;\n        // if not used in many intervals, close it\n        if (this._socketLastUsed >= this._timeoutsToClose) {\n            this.close();\n            return;\n        }\n    } else {\n        this._socketLastUsed = 0;\n    }\n\n    // Reset whether its been used\n    this._socketUsed = false;\n    // Start timer, if we have a positive timeout\n    if (this._flushBufferTimeout > 0 && !this._socketTimer) {\n        this._socketTimer = setInterval(this._socketTimeout.bind(this), this._flushBufferTimeout);\n    }\n};\n\n\n/*\n * Close the socket, if in use and cancel the interval-check, if running.\n */\nTCPSocket.prototype.close = function close() {\n    this.log(\"close()\");\n    if (!this._socket) {\n        return;\n    }\n\n    if (this._buffer.length > 0) {\n        this._flushBuffer();\n    }\n\n    // Cancel the running timer\n    if (this._socketTimer) {\n        clearInterval(this._socketTimer);\n        this._socketTimer = undefined;\n    }\n\n    // Wait a tick or two, so any remaining stats can be sent.\n    setTimeout(this.kill.bind(this), 10);\n};\n\n/* Kill the socket RIGHT NOW.\n */\nTCPSocket.prototype.kill = function kill() {\n    this.log(\"kill()\");\n    if (!this._socket) {\n        return;\n    }\n\n    // Clear the timer and catch any further errors silently\n    if (this._socketTimer) {\n        clearInterval(this._socketTimer);\n        this._socketTimer = undefined;\n    }\n    this._socket.on('error', function () {});\n\n    this._socket.end();\n    this._socket = undefined;\n};\n\nTCPSocket.prototype._createSocket = function _createSocket(callback) {\n    this.log(\"_createSocket()\");\n    var that = this;\n    if (this._socket) {\n        return callback();\n    }\n\n    this._socket = net.Socket({\n        type: 'tcp4'\n    });\n\n\n    // Listen on 'error'-events, so they don't bubble up to the main\n    // application. Try closing the socket for now, forcing it to be re-created\n    // later.\n    this._socket.once('error', this.kill.bind(this));\n\n    // Call on when the socket is ready.\n    this._socket.connect(this._port, this._hostname, function() {\n        return callback();\n    });\n\n    // Start timer, if we have a positive timeout\n    if (this._flushBufferTimeout > 0 && !this._socketTimer) {\n        this._socketTimer = setInterval(this._socketTimeout.bind(this), this._flushBufferTimeout);\n    }\n};\n\n/* Buffer management\n */\nTCPSocket.prototype._enqueue = function _enqueue(data) {\n    this.log(\"_enqueue(\", data, \")\");\n\n    if (!this._socketTimer) {\n        this._socketTimer = setInterval(this._socketTimeout.bind(this), this._flushBufferTimeout);\n    }\n    // Empty buffer if it's too full\n    if (this._buffer.reduce(function(sum, line) { return sum + line.length; }, 0) > this._maxBuferSize) {\n        this._flushBuffer();\n    }\n\n    this._buffer.push(data);\n};\n\nTCPSocket.prototype._flushBuffer = function _flushBuffer() {\n    this.log(\"_flushBuffer() →\", this._buffer);\n    var that = this;\n    this._send(this._buffer, function() {\n        that._buffer = [];\n    });\n};\n\n/* Send data - public interface.\n */\nTCPSocket.prototype.send = function send(data) {\n    this.log(\"send(\", data, \")\");\n    if (this._maxBufferSize === 0) {\n        return this._send([data], function() {});\n    } else {\n        this._enqueue(data);\n    }\n};\n\n/*\n * Send data.\n */\nTCPSocket.prototype._send = function _send(data, callback) {\n    this.log(\"_send(\", data, \")\");\n    // If we don't have a socket, or we have created one but it isn't\n    // ready yet, we need to enqueue data to send once the socket is ready.\n    var that = this;\n\n    //Must be asynchronous\n    this._createSocket(that._writeToSocket.bind(that, data, callback));\n};\n\nTCPSocket.prototype._writeToSocket = function _writeToSocket(data, callback) {\n    // Create message\n    // Trailing \\n important because socket.write will sometimes concat multiple 'write' calls.\n    var message = new Buffer(data.join('\\n') + '\\n');\n\n    if (this._debug) {\n        console.warn(message.toString());\n    }\n    if (this._socket) {\n        this._socketUsed = true;\n        this._socket.write(message);\n    }\n\n    callback();\n};\n\nmodule.exports = TCPSocket;\n","/home/travis/build/npmtest/node-npmtest-statsd-client/node_modules/statsd-client/lib/helpers/getExpressMiddleware.js":"\n// Removes \":\", heading/trailing / and replaces / by _ in a given route name\nfunction sanitize(routeName) {\n    return routeName.replace(/:/g, \"\").replace(/^\\/|\\/$/g, \"\").replace(/\\//g, \"_\");\n}\n\n// Extracts a route name from the request or response\nfunction findRouteName(req, res) {\n    // Did we get a hardcoded name, or should we figure one out?\n    if (res.locals && res.locals.statsdUrlKey) {\n\n        return res.locals.statsdUrlKey;\n    }\n\n    if (req.route && req.route.path) {\n        var routeName = req.route.path;\n\n        if (Object.prototype.toString.call(routeName) === '[object RegExp]') {\n            routeName = routeName.source;\n        }\n\n        if (req.baseUrl) {\n            routeName = req.baseUrl + routeName;\n        } else if (routeName === '/') {\n            routeName = 'root';\n        }\n\n        // Appends the HTTP method\n        return req.method + '_' + sanitize(routeName);\n    }\n}\n\n/*\n * Return express middleware that measures overall performance.\n *\n * The `prefix` defaults to `''` (but is currently mandatory). The\n * `options`-argument is optional.\n *  * You can set `timeByUrl`, that add a timer per URL template (ex:\n *    `/api/:username/:thingie`). This can be changed run-time by setting\n *    `res.locals.statsdUrlKey`.\n *  * Add a `function(client, startTime, req, res)` in `onResponseEnd` that\n *    will be called at the very end.\n */\nfunction factory(parentClient) {\n    return function (prefix, options) {\n        options = options || {};\n\n        var client = parentClient.getChildClient(prefix || '');\n        var timeByUrl = options.timeByUrl || false;\n        var notFoundRouteName = options.notFoundRouteName || 'unknown_express_route';\n        var onResponseEnd = options.onResponseEnd || undefined;\n\n        return function (req, res, next) {\n            var startTime = new Date();\n\n            // Shadow end request\n            var end = res.end;\n            res.end = function () {\n                res.end = end;\n                end.apply(res, arguments);\n\n                var urlPrefix = '';\n\n                // Time by URL?\n                if (timeByUrl) {\n                    urlPrefix += '.';\n                    urlPrefix += findRouteName(req, res) || notFoundRouteName;\n                }\n\n                client.increment('response_code' + urlPrefix + '.' + res.statusCode);\n                client.timing('response_time' + urlPrefix, startTime);\n\n                if (onResponseEnd) {\n                    onResponseEnd(client, startTime, req, res);\n                }\n            };\n            next();\n        };\n    };\n}\n\nmodule.exports = factory;\n"}